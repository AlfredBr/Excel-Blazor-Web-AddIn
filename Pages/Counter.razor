@page "/counter"
@using System.Diagnostics;
@using Microsoft.AspNetCore.Components;
@using Microsoft.JSInterop;
@using System.Drawing;
@using System.Reflection;

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p>Demonstrates communication between Excel and the AddIn.</p>

<div class="alert alert-info"><strong>OfficeContext: </strong>@(OfficeContext ?? "Browser")</div>

<div class="alert alert-secondary"><span class="label">Current count:</span><b>@currentCount</b></div>
<div class="alert alert-dark">
	<span class="label">Current Location:</span><b>@cellLocation</b>
	<br />
	<span class="label">Current Value:</span><b>@cellValue</b></div>

<button class="btn btn-primary shadow-none" @onclick="IncrementCount">Click me</button>

@code {
    [Inject] public IJSRuntime JSRuntime { get; set; } = default!;
    public IJSObjectReference JSModule { get; set; } = default!;
    private DotNetObjectReference<Counter>? _objRef = null;
    private Size _size = new Size(0, 0);
    private int currentCount = 0;
	private string cellLocation = "";
	private string cellValue = "";
	private string OfficeContext = "Excel";
    private string BrowserVis = "";
    private string ExcelVis = "";

    [JSInvokable]
    public async Task OnResize(int width, int height)
    {
        Console.WriteLine($"OnResize({width},{height})");
        _size = new Size(width, height);
        await InvokeAsync(StateHasChanged);
    }

	[JSInvokable]
    public async Task OnChanged(string cellString, string cellValue)
    {
        Console.WriteLine($"OnChanged({cellString} : '{cellValue}')");
        await InvokeAsync(StateHasChanged);
    }

	[JSInvokable]
	public async Task OnSelectionChanged(string cellLocation, string cellValue)
	{
		this.cellLocation = cellLocation;
		this.cellValue = cellValue;
		await InvokeAsync(StateHasChanged);
	}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            Debug.Assert(JSRuntime is not null);
            Debug.Assert(_objRef is not null);
            _ = await JSRuntime.InvokeAsync<string>("SetDotNetHelper", _objRef);
            JSModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/Counter.razor.js");
            Debug.Assert(JSModule is not null);
			await JSModule.InvokeVoidAsync("registerHandlersAsync");
            OfficeContext = await JSModule.InvokeAsync<string>("getOfficeContextAsync");
            BrowserVis = OfficeContext == "Excel" ? "d-none" : "";
            ExcelVis = OfficeContext == "Excel" ? "" : "d-none";
            await base.OnAfterRenderAsync(firstRender);
        }
    }

    private async Task IncrementCount()
    {
        currentCount++;
        await JSModule.InvokeVoidAsync("incrementCountAsync", currentCount);
    }
}
